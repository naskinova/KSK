# streamlit_app/examiner/grade_form.py
import streamlit as st
import pandas as pd
from io import BytesIO
import sys
from pathlib import Path

# Add root path to allow absolute imports
sys.path.append(str(Path(__file__).resolve().parent.parent))

from examiner.api import save_grades, fetch_assigned_students, fetch_existing_grades

COLUMNS = ["student_id"] + [str(i) for i in range(1, 9)] + ["–û–±—â–æ"]
DEFAULT_ROWS = 10

def render_examiner_form():
    st.subheader("üìã –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ü–µ–Ω–∫–∏")

    user = st.session_state.get("user")
    if not user or user.get("role") != "examiner":
        st.error("‚ùå –ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        st.stop()

    st.info(f"üßë‚Äçüè´ –ü—Ä–æ–≤–µ—Ä—è–≤–∞—â: {user['name']} ({user['email']}, ID: {user['id']})")

    # Fetch student IDs if not cached
    if "assigned_students" not in st.session_state:
        st.session_state.assigned_students = fetch_assigned_students()

    assigned_ids = st.session_state.assigned_students

    # Fetch grades if not cached
    if "grades_df" not in st.session_state:
        existing = fetch_existing_grades()
        if existing:
            df = pd.DataFrame(existing)
            df["‚ùå –ò–∑—Ç—Ä–∏–π"] = False
        else:
            data = []
            for student_id in assigned_ids:
                row = {col: 0.0 for col in COLUMNS}
                row["student_id"] = student_id
                row["‚ùå –ò–∑—Ç—Ä–∏–π"] = False
                data.append(row)

            if not data:
                data = [{**{col: 0.0 for col in COLUMNS}, "student_id": "", "‚ùå –ò–∑—Ç—Ä–∏–π": False}
                        for _ in range(DEFAULT_ROWS)]
            df = pd.DataFrame(data)

        st.session_state.grades_df = df

    df = st.session_state.grades_df

    # üßÆ Recalculate totals
    for idx, row in df.iterrows():
        total = sum([float(row.get(str(i), 0)) for i in range(1, 9) if pd.notnull(row.get(str(i)))])
        df.at[idx, "–û–±—â–æ"] = round(total, 2)

    if "‚ùå –ò–∑—Ç—Ä–∏–π" not in df.columns:
        df["‚ùå –ò–∑—Ç—Ä–∏–π"] = False

    # ‚úèÔ∏è Editable Table
    edited_df = st.data_editor(
        df,
        num_rows="dynamic",
        use_container_width=True,
        column_order=COLUMNS + ["‚ùå –ò–∑—Ç—Ä–∏–π"],
        key="grades_editor",
        hide_index=True,
    )
    st.session_state.grades_df = edited_df

    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ûï –î–æ–±–∞–≤–∏ —Ä–µ–¥"):
            new_row = {col: 0.0 for col in COLUMNS}
            new_row["student_id"] = ""
            new_row["‚ùå –ò–∑—Ç—Ä–∏–π"] = False
            st.session_state.grades_df = pd.concat(
                [st.session_state.grades_df, pd.DataFrame([new_row])],
                ignore_index=True
            )

    with col2:
        if st.button("üóë –ò–∑—Ç—Ä–∏–π –∏–∑–±—Ä–∞–Ω–∏—Ç–µ —Ä–µ–¥–æ–≤–µ"):
            df = st.session_state.grades_df
            if "‚ùå –ò–∑—Ç—Ä–∏–π" in df.columns:
                df_cleaned = df[df["‚ùå –ò–∑—Ç—Ä–∏–π"] != True].drop(columns=["‚ùå –ò–∑—Ç—Ä–∏–π"], errors="ignore")
                st.session_state.grades_df = df_cleaned.reset_index(drop=True)
                st.success("‚úÖ –ò–∑–±—Ä–∞–Ω–∏—Ç–µ —Ä–µ–¥–æ–≤–µ —Å–∞ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏.")
            else:
                st.warning("‚ùó –ù—è–º–∞ –∏–∑–±—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ.")

    st.markdown("---")

    # üìÑ Preview
    if st.button("üìÑ –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –ø–æ–¥–∞–¥–µ–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏"):
        df_clean = st.session_state.grades_df.copy()
        df_clean = df_clean[df_clean["student_id"].astype(str).str.strip() != ""]
        df_preview = df_clean.drop(columns=["‚ùå –ò–∑—Ç—Ä–∏–π"], errors="ignore")
        st.dataframe(df_preview, use_container_width=True)

        output = BytesIO()
        df_preview.to_excel(output, index=False)
        st.download_button(
            label="‚¨áÔ∏è –ò–∑—Ç–µ–≥–ª–∏ –∫–∞—Ç–æ Excel",
            data=output.getvalue(),
            file_name="grades_preview.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

    # üíæ Save
    if st.button("üíæ –ó–∞–ø–∞–∑–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ"):
        df_clean = st.session_state.grades_df.copy()
        df_clean = df_clean[df_clean["student_id"].astype(str).str.strip() != ""]
        df_clean = df_clean.drop(columns=["‚ùå –ò–∑—Ç—Ä–∏–π"], errors="ignore")

        payload = df_clean[COLUMNS[:-1]].to_dict(orient="records")
        st.write("üì¶ –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞:", payload)

        success = save_grades(payload)
        if success:
            st.success("‚úÖ –í—Å–∏—á–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            st.error("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –æ—Ü–µ–Ω–∫–∏—Ç–µ.")
